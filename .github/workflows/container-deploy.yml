name: Container Image Deployment CI

on:
  push:
    branches:
      - main
      - deploy-*
    tags: 
      - v*.*.*

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ startsWith(github.ref, 'refs/tags/v') && 'off-org' || 'off-net' }}
    concurrency: ${{ startsWith(github.ref, 'refs/tags/v') && 'off-org' || 'off-net' }}
    steps:
    - name: Wait for frontend container build workflow
      uses: tomchv/wait-my-workflow@v1.1.0
      id: wait-build
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: build (frontend)
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        intervalSeconds: 10
        timeoutSeconds: 600 # 10m

    - name: Wait for backend container build workflow
      uses: tomchv/wait-my-workflow@v1.1.0
      id: wait-build2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: build (backend)
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        intervalSeconds: 10
        timeoutSeconds: 600 # 10m

    - name: Do something if build fail
      if: steps.wait-build.outputs.conclusion == 'failure' || steps.wait-build2.outputs.conclusion == 'failure' 
      run: echo fail && false # fail if build fail

    - name: Do something if build timeout
      if: steps.wait-build.outputs.conclusion == 'timed_out' || steps.wait-build.outputs.conclusion == 'timed_out'
      run: echo Timeout && false # fail if build time out

    # - name: Get po/* changed files
    #   id: lang-files
    #   uses: tj-actions/changed-files@v1.0.2
    #   with:
    #     files: "^po/*"

    - name: Checkout git repository
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        script_stop: false
        script: |
          # Clone Git repository if not already there
          [ ! -d 'openfoodfacts-server' ] && git clone --depth 1 https://github.com/openfoodfacts/openfoodfacts-server/ --no-single-branch 2>&1

          # Go to repository directory
          cd openfoodfacts-server/

          # Fetch newest commits (in case it wasn't freshly cloned)
          git fetch --depth 1

          # Checkout current commit SHA
          git checkout -qf ${{ github.sha }}

    - name: Set environment variables
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        script_stop: false
        script: |
          # Go to repository directory
          cd openfoodfacts-server/

          # Set Docker Compose variables
          echo "DOCKER_CLIENT_TIMEOUT=120 > .env"
          echo "COMPOSE_HTTP_TIMEOUT=120 >> .env"
          echo "COMPOSE_PROJECT_NAME=po" >> .env
          echo "COMPOSE_FILE=docker-compose.yml;docker/prod.yml;docker/mongodb.yml;docker/geolite2.yml" >> .env

          # Set App variables
          echo "TAG=sha-${{ github.sha }}" >> .env
          echo "PRODUCER_PLATFORM=0" >> .env
          echo "PRODUCT_OPENER_DOMAIN=${{ secrets.PRODUCT_OPENER_DOMAIN }}" >> .env
          echo "PRODUCT_OPENER_PORT=80" >> .env
          echo "MONGODB_HOST=${{ secrets.MONGODB_HOST }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "ROBOTOFF_URL=${{ secrets.ROBOTOFF_URL }}" >> .env
          echo "GOOGLE_CLOUD_VISION_API_KEY=${{ secrets.GOOGLE_CLOUD_VISION_API_KEY }}" >> .env
          echo "CROWDIN_PROJECT_IDENTIFIER=${{ secrets.CROWDIN_PROJECT_IDENTIFIER }}" >> .env
          echo "CROWDIN_PROJECT_KEY=${{ secrets.CROWDIN_PROJECT_KEY }}" >> .env
          echo "GEOLITE2_PATH=${{ secrets.GEOLITE2_PATH }}" >> .env
          echo "GEOLITE2_LICENSE_KEY=${{ secrets.GEOLITE2_LICENSE_KEY }}" >> .env
          echo "GEOLITE2_ACCOUNT_ID=${{ secrets.GEOLITE2_ACCOUNT_ID }}" >> .env

          # Override domain name in nginx.conf
          sed -i.bak "s/productopener.localhost/${{ secrets.PRODUCT_OPENER_DOMAIN }}/g" ./conf/nginx.conf

    - name: Set BUILD_LANG if needed
      # if: steps.lang-files.outputs.any_changed == 'true'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        script_stop: false
        script: |
          cd openfoodfacts-server/
          echo "BUILD_LANG=1" >> .env

    - name: Create Docker volumes
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        script_stop: false
        script: |
          for volume in product_images html_data icons_dist js_dist css_dist image_attributes node_modules users products; do 
            docker volume create $volume || echo "Docker volume '$volume' already exist. Skipping."
          done;

    - name: Start services
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        script_stop: false
        script: |
          cd openfoodfacts-server/
          docker-compose up -d --remove-orphans 2>&1
          docker-compose exec backend sh -c "\
            echo 'root' >> /etc/incron.allow && \
            incrontab -u root /opt/product-opener/conf/incron.conf && \
            incrond"

    - name: Check services are up
      uses: appleboy/ssh-action@master
      if: ${{ always() }}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        script_stop: false
        script: |
          cd openfoodfacts-server/
          exit_code=0
          for service in backend frontend mongodb memcached postgres geoipupdate; do 
            if [ -z `docker-compose ${{ env.compose_args }} ps -q $service` ] || [ -z `docker ps -q --no-trunc | grep $(docker-compose ${{ env.compose_args }} ps -q $service)` ]; then
              echo "$service: DOWN"
              exit_code=1
            else
              echo "$service: UP"
            fi
          done;
          exit $exit_code;

    - name: Cleanup obsolete Docker objects
      uses: appleboy/ssh-action@master
      if: ${{ always() }}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        script_stop: false
        script: |
          docker system prune -af
