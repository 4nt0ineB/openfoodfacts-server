name: Deploy to pre-prod Proxmox VM (Docker)

on:
  push:
    branches:
      - deploy-*
      - main

jobs:
  deploy:
    environment: off-net
    concurrency: off-net
    runs-on: ubuntu-latest
    steps:
    # TODO: Uncomment when changing from deploy-* to main branch - this will 
    # wait for container-build.yml build action to run before deploying the 
    # container
    # - name: Wait container CI build
    #   uses: tomchv/wait-my-workflow@v1.1.0
    #   id: wait-build
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     checkName: build
    #     ref: ${{ github.event.pull_request.head.sha || github.sha }}
    #     intervalSeconds: 10
    #     timeoutSeconds: 100
    # - name: Do something if build success
    #   if: steps.wait-build.outputs.conclusion == 'success'
    #   run: echo success && true # You can also just continue with

    # - name: Do something if build isn't launch
    #   if: steps.wait-build.outputs.conclusion == 'does not exist'
    #   run: echo job does not exist && true

    # - name: Do something if build fail
    #   if: steps.wait-build.outputs.conclusion == 'failure'
    #   run: echo fail && false # fail if build fail

    # - name: Do something if build timeout
    #   if: steps.wait-build.outputs.conclusion == 'timed_out'
    #   run: echo Timeout && false # fail if build time out

    - name: Deploy image to pre-prod Proxmox VM
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Clone Git repository if not already there
          [ ! -d 'openfoodfacts-server' ] && git clone --depth 1 https://github.com/openfoodfacts/openfoodfacts-server/ --no-single-branch

          # Checkout current commit SHA
          git checkout ${{ github.sha }}

          # Go to docker/ directory
          cd openfoodfacts-server/docker/

          # Pull latest container images
          sudo docker-compose pull

          # Recreate containers that have a new image
          sudo docker-compose up -d --remove-orphans

          # Remove obsolete images
          sudo docker image prune

          # Import latest dump of mongodb production db
          # wget https://static.openfoodfacts.org/data/openfoodfacts-mongodbdump.tar.gz
          # sudo docker cp openfoodfacts-mongodbdump.tar.gz docker_mongodb_1:/data/db
          # sudo docker exec -it docker_mongodb_1 -c "cd /data/db && tar -xzvf openfoodfacts-mongodbdump.tar.gz && mongorestore"

          # Import sample data into docker-compose db
          sudo docker exec -it docker_backend_1 -c "bash /opt/scripts/import_sample_data.sh"
